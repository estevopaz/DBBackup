#!/usr/bin/env python3

'''
Backup 1 copy per month, keep last 4 weeks and last 7 days.
'''

import datetime
import logging
import os
import subprocess
import sys
import yaml
from dateutil.relativedelta import relativedelta


logging.basicConfig(format='DBBackup : %(asctime)s : %(levelname)s : %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    level=logging.INFO)
LOGGER = logging.getLogger(__name__)


CONFIG_FILE = '/etc/dbbackup/config.yml'


def dump_command(conf, dbms, db_conf):
    '''
    Get dump command.
    '''
    ignore = list()
    for exclude in db_conf['exclude']:
        ignore.append(conf[dbms]['Command ignore']
                      .format(database=db_conf['database'], table=exclude))
    return conf[dbms]['Command'].format(host=db_conf['host'],
                                        user=db_conf['user'],
                                        password='****',
                                        database=db_conf['database'],
                                        ignore=' '.join(ignore))


def run(command):
    '''
    Command launch.
    '''
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout = process.stdout.read()
    stderr = process.stderr.read()
    if stdout:
        LOGGER.info(stdout.decode('UTF-8'))
    if stderr:
        LOGGER.error(stderr.decode('UTF-8'))
        raise RuntimeError(stderr)


def main():
    '''
    Backup manager.
    '''
    with open(CONFIG_FILE) as file_open:
        config = yaml.load(file_open)

    today = datetime.date.today()
    for dbms in ('MySQL', 'PostgreSQL'):

        if dbms in config:

            for db_conf in config[dbms]['Databases']:

                # Destinity folder
                path = os.path.join(config['BACKUP'], dbms, db_conf['host'], db_conf['database'])
                os.makedirs(path, exist_ok=True)

                # Dump command
                dump = dump_command(config, dbms, db_conf)

                # Monthly backup
                monthly = False
                file_name = ('00_Month_{year}_{month}.sql{extension}'
                             .format(year=today.strftime('%Y'),
                                     month=today.strftime('%m'),
                                     extension=config['Compression']['Extension']))
                monthly_path = os.path.join(path, file_name)
                if not os.path.exists(monthly_path):

                    monthly = True

                    # Create monthly backup
                    LOGGER.info('Creating monthly backup ...')

                    command = ('{dump} | {compression} {output_path}'
                               .format(dump=dump,
                                       compression=config['Compression']['Command'],
                                       output_path=monthly_path))
                    LOGGER.info('Command: %s', command)
                    run(command.replace('****', db_conf['password']))

                # Remove old monthly backups
                for i in range(config['Keep last']['Months'], config['Keep last']['Months'] + 12):
                    date_to_check = today - relativedelta(months=i)
                    file_name = ('00_Month_{year}_{month}.sql{extension}'
                                 .format(year=date_to_check.strftime('%Y'),
                                         month=date_to_check.strftime('%m'),
                                         extension=config['Compression']['Extension']))
                    output_path = os.path.join(path, file_name)
                    if os.path.exists(output_path):
                        LOGGER.info('Removing old monthly backup %s !', output_path)
                        os.unlink(output_path)

                # Weekly backup
                weekly = False
                file_name = ('01_Week_{year}_{week:02}.sql{extension}'
                             .format(year=today.strftime('%Y'),
                                     week=today.isocalendar()[1],
                                     extension=config['Compression']['Extension']))
                weekly_path = os.path.join(path, file_name)
                if not os.path.exists(weekly_path):

                    weekly = True

                    # Create weekly backup
                    LOGGER.info('Creating weekly backup ...')

                    # If monthly or weekly backup, use it instead of create a new one
                    if monthly:
                        os.link(monthly_path, weekly_path)
                        LOGGER.info('Monthly dump reused for weekly backup %s', weekly_path)
                    else:
                        command = ('{dump} | {compression} {output_path}'
                                   .format(dump=dump,
                                           compression=config['Compression']['Command'],
                                           output_path=weekly_path))
                        LOGGER.info('Command: %s', command)
                        run(command.replace('****', db_conf['password']))

                # Remove old weekly backups
                for i in range(config['Keep last']['Weeks'], config['Keep last']['Weeks'] + 52):
                    date_to_check = today - relativedelta(weeks=i)
                    file_name = ('01_Week_{year}_{week:02}.sql{extension}'
                                 .format(year=date_to_check.strftime('%Y'),
                                         week=date_to_check.isocalendar()[1],
                                         extension=config['Compression']['Extension']))
                    output_path = os.path.join(path, file_name)
                    if os.path.exists(output_path):
                        LOGGER.info('Removing old weekly backup %s !', output_path)
                        os.unlink(output_path)

                # Daily backup
                file_name = ('02_Day_{date}.sql{extension}'
                             .format(date=today.isoformat(),
                                     extension=config['Compression']['Extension']))
                daily_path = os.path.join(path, file_name)
                if os.path.exists(daily_path):
                    LOGGER.warning("Today's backup already exists, daily backup aborted !")
                else:

                    # Create daily backup
                    LOGGER.info('Creating daily backup ...')

                    # If monthly or weekly backup, reuse it instead of create a new one
                    if weekly:
                        os.link(weekly_path, daily_path)
                        LOGGER.info('Weekly dump reused for daily backup %s', daily_path)
                    else:
                        command = ('{dump} | {compression} {output_path}'
                                   .format(dump=dump,
                                           compression=config['Compression']['Command'],
                                           output_path=daily_path))
                        LOGGER.info('Command: %s', command)
                        run(command.replace('****', db_conf['password']))

                # Keep last seven daily backups
                for i in range(config['Keep last']['Days'], config['Keep last']['Days'] + 366):
                    file_name = ('02_Day_{date}.sql{extension}'
                                 .format(date=(today - relativedelta(days=i)).isoformat(),
                                         extension=config['Compression']['Extension']))
                    output_path = os.path.join(path, file_name)
                    if os.path.exists(output_path):
                        LOGGER.info('Removing old daily backup %s !', output_path)
                        os.unlink(output_path)
                    else:
                        LOGGER.debug('No file %s to remove !', output_path)


if __name__ == '__main__':
    try:
        main()
    except RuntimeError:
        sys.exit('Command error !!!')
    sys.exit(0)
